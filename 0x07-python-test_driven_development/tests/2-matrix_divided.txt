>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrixD = [[1, 4, 80],[5, 6, 7],[55, 77, 11]]
>>> matrixS = [[1, 4, 80],[5, 2, 5]]
>>> noneL = None
>>> empty = []
>>> empty_matrix = [[], [], []]
>>> not_num = [[10, 'best', 50],[50,'school', 5]]
>>> not_same_len = [[10, 50],[10, 50, 77]]
>>> not_list = [[1, 10, [2, 22]],[10, [55, 1], [11, 2]]]
>>> matrix_divided(matrixS, 10)
[[0.1, 0.4, 8.0], [0.5, 0.2, 0.5]]
>>> matrix_divided(matrixD, 3)
[[0.33, 1.33, 26.67], [1.67, 2.0, 2.33], [18.33, 25.67, 3.67]]
>>> matrix_divided(matrixS, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero
>>> matrix_divided(noneL, 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(empty, 10)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(empty_matrix, 20)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(not_num, 50)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided(not_same_len, 30)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided(not_list, 30)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
